{"version":3,"sources":["components/CodeField.js","components/Chat.js","components/Game.js","App.js","serviceWorker.js","index.js"],"names":["CodeField","code","send","gameId","cursors","cursorPosition","setCursorPosition","wrongChars","setWrongChars","useEffect","id","onKeyDown","event","key","includes","preventDefault","Error","mapKeyToChar","tabIndex","split","map","char","index","style","Object","entries","forEach","color","innerIndex","background","Chat","messages","onSubmitChatInput","setChatInput","chatInput","sender","content","onSubmit","onChange","target","value","type","instructionMessage","Game","useState","setMessages","setCode","ws","setWs","setGameId","setCursors","body","message","JSON","stringify","addMessage","concat","addInstructionMessage","a","websocket","WebSocket","fetchWs","onmessage","parse","data","program","language","words","dispatch","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.c38b6750.chunk.js","sourcesContent":["import React, { useEffect } from 'react'\n\nconst isUselessKey = (key) => ['Shift', 'Meta', 'Alt', 'Control'].includes(key)\n\nconst mapKeyToChar = (key) => {\n  if(['Shift', 'Meta', 'Alt', 'Control', 'Backspace'].includes(key)){\n    throw new Error('Not mapable to key')\n  } else if (key === \"Enter\"){\n    return \"\\n\"\n  } else if (key === 'Tab') {\n    return \"\\t\"\n  } else {\n    return key\n  }\n}\n\nconst CodeField = ({ code, send, gameId, cursors, cursorPosition, setCursorPosition, wrongChars, setWrongChars }) => {\n  useEffect(() => {\n    if(code !== ''){\n      send('cursor', { cursorPosition }, gameId)\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [cursorPosition, gameId, code])\n\n  const handleKeyDown = (event) => {\n    if(['Tab', ' '].includes(event.key)){ // Prevent search bar being opened on Tab and scroll on Space\n      event.preventDefault()\n    }\n\n    if(isUselessKey(event.key)){}\n    else if (event.key === 'Backspace'){\n      if(wrongChars > 0){\n        setWrongChars(wrongChars - 1)\n      } else if (cursorPosition > 0) {\n        setCursorPosition(cursorPosition - 1)\n      }\n    } else if(wrongChars > 0){\n      setWrongChars(wrongChars + 1)\n    } else {\n      if(mapKeyToChar(event.key) !== code[cursorPosition]) {\n        setWrongChars(wrongChars + 1)\n      } else {\n        setCursorPosition(cursorPosition + 1)\n      }\n    }\n  }\n\n  return (\n    <>\n      <div id=\"code-field-header\"/>\n      <pre onKeyDown={handleKeyDown} id=\"code-field-body\" tabIndex=\"0\">\n        {\n          code && code.split('').map((char, index) => {\n            let style = {}\n\n            Object.entries(cursors).forEach(([color, innerIndex]) => {\n              if(index === innerIndex){\n                style.background = color\n              }\n            })\n\n            if(wrongChars > 0) {\n              if(index >= cursorPosition && index < cursorPosition + wrongChars)\n                style.background = '#ba5d5d'\n            } else if (index === cursorPosition) {\n              style.background = '#cfbaa5'\n            }\n        \n            if(char === \"\\n\"){\n              return <br key={index}/>\n            } else {\n              return <span key={index} style={style}>{char}</span>\n            }\n          })\n        }\n      </pre>\n    </>\n  )\n}\n\nexport default CodeField","import React from 'react'\n\nconst Chat = ({ messages, onSubmitChatInput, setChatInput, chatInput }) => {  \n  return (\n    <>\n    <div id=\"chat-header\"/>\n      <div id=\"chat-body\">\n        {\n          messages.map(({sender, content}, index) => (\n            <div key={index}>\n              <b>&lt;{sender}&gt;</b>\n              <span>{content}</span>\n            </div>\n          ))\n        }\n      </div>\n      <form onSubmit={onSubmitChatInput} id=\"chat-input\">\n        <input onChange={(event) => setChatInput(event.target.value)}\n               type=\"text\"\n               value={chatInput}/>\n      </form>\n    </>\n  )\n}\n\nexport default Chat","import React, { useState, useEffect } from 'react'\nimport './Game.css'\nimport CodeField from './CodeField'\nimport Chat from './Chat'\n\nconst wsUrl = process.env.NODE_ENV === 'development' ? 'ws://localhost:443/' : 'wss://vast-river-29958.herokuapp.com/'\nconst instructionMessage = {\n  sender: 'liracer',\n  content: 'To join a game, send \"/join id\". If a game by the given id exists you join that, otherwise a new game is created.'\n}\n\nconst Game = () => {\n  const [messages, setMessages] = useState([])\n  const [code, setCode] = useState('')\n  const [ws, setWs] = useState(null)\n  const [chatInput, setChatInput] = useState('')\n  const [gameId, setGameId] = useState(null)\n  const [cursors, setCursors] = useState({})\n  const [cursorPosition, setCursorPosition] = useState(0)\n  const [wrongChars, setWrongChars] = useState(0)\n\n\n  const send = (type, body, id) => {\n    const message = {\n      type,\n      body,\n      id\n    }\n    ws.send(JSON.stringify(message))\n  }\n\n  const addMessage = (sender, content) => setMessages((messages) => messages.concat({ sender, content }))\n  const addInstructionMessage = () => setMessages((messages) => messages.concat(instructionMessage))\n\n  useEffect(() => {\n    addMessage('liracer', 'Welcome to liracer!')\n    addInstructionMessage()\n    const fetchWs = async () => {\n      const websocket = new WebSocket(wsUrl)\n      setWs(websocket)\n    }\n    fetchWs()\n  }, [])\n\n  useEffect(() => {\n    if(ws === null){\n      return\n    }\n\n    const dispatch = (message) => {\n      const { type, body } = JSON.parse(message.data)\n\n      switch(type){\n        case('messages'):\n        case('message'):\n          setMessages((messages) => messages.concat(body))\n          break\n        case('quote'):\n          setCode(body.code)\n          addMessage('liracer', `The current quote is ${body.program} in the ${body.language} language`)\n          setCursorPosition(0)\n          setWrongChars(0)\n          break\n        case('cursor'):\n          setCursors((cursors) => ({ ...cursors, [body.color]: body.cursorPosition }))\n          break\n        default:\n          throw new Error('Could not dispatch message')\n      }\n    }\n\n    ws.onmessage = dispatch\n  }, [ws])\n\n  const handleSubmitChatInput = (event) => {\n    event.preventDefault()\n\n    if(chatInput === '') return\n\n    const dispatch = () => {\n      const words = chatInput.split(' ')\n      const command = words[0]\n      switch(command){\n        case('/join'):\n          const id = words[1]\n          send('join', {}, id)\n          setGameId(id)\n          break\n        default:\n          if(gameId === null){\n            addMessage('liracer', 'You need to be in a game to do this.')\n            addInstructionMessage()\n          }\n          else {\n            const message = {\n              content: chatInput\n            }\n            send('message', message, gameId)\n          }\n      }\n    }\n\n    dispatch()\n    setChatInput('')\n  }\n\n  return (\n    <div id=\"game\">\n      <Chat messages={messages}\n            onSubmitChatInput={handleSubmitChatInput}\n            chatInput={chatInput}\n            setChatInput={setChatInput}/>\n      <CodeField code={code}\n                 send={send}\n                 gameId={gameId}\n                 cursors={cursors}\n                 cursorPosition={cursorPosition}\n                 setCursorPosition={setCursorPosition}\n                 wrongChars={wrongChars}\n                 setWrongChars={setWrongChars}/>\n    </div> \n  )\n}\n\nexport default Game","import React from 'react'\nimport Game from './components/Game'\nimport './App.css'\n\nconst App = () => <Game/>       \n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}